JPublish 4 change log:

[2010.04.13]
  -added support for annotated REST resources via a JPublish Wink module; JPWink
  -Apache Wink is a full implementation of the JAX-RS 1.0 specification, providing a rich set of
  features and expansions that extend and supplement the JAX-RS specification.

[2010.04.07]
   - added support for Restlet resource and a new configuration syntax (check the JPRestlet module
   changelog). Upgraded Restlet to 1.1.9
   - added Restlet Resource examples for GET, POST, etc

[2009.09.10]
  - added support for the Content-Length response attribute
  - rollback :(

[2009.08.09]
  added generic RSS support. The demo provided (svn) is using a simple Beanshell action as a
  feed manager and the ROME framework for publishing the feed. RSS Domain modeling is in progress and a 
  new JPublish News Repository will follow shortly.

[2009.06.26]
  upgraded to Ehcache 1.6.0 (http://ehcache.sourceforge.net)
  re-factored the JPublish cache support for obtaining cache statistics (if supported)

[2009.05.28]
  upgraded JPublish RESTLET support to Noelios-Restlet-Engine/1.1.5

[2009.05.22]
  the response Content-Type will be calculated just before rendering the result and not before executing the
  actions. This will allow user modules to manipulate the response content type.


[2009.05.19]
  JPRestletModule can now be mapped on a list of paths.

  Example:
  <module classname="org.jpublish.module.restlet.JPRestletModule">
    <urls>
        <url>/rest/*</url>
        <url>/restful/*</url>
    </urls>
    <restlet-config>/WEB-INF/jprestlet-config.xml</restlet-config>
  </module>

  With a configuration like the one above, JPRestletModule will respond for any path starting with
  /rest/ or /restful/. This implementation is backward compliant.



[2009.04.30]
- supporting the request parameter 'format' (or any user defined parameter name) is now optional; disabled by default.
  To enable this support, add the following line to your jpublish.xml config file, excerpt:

       <formatChangeParameterName>format</formatChangeParameterName>

  If the above parameter is specified, the JPublish servlet will resolve the response ContentType based on
  the request.getParameter( "format") value or will fall back on checking the requested file extension, as usual.


[2009.04.28]
 - added few more default mime types
 - introduced the support for the "format" request parameter. The response.ContentType will
   follow the ?format=<xml|html|json|etc>, if the "format" parameter exists.


[2008.07.23]
 - JPublishDWR  Actions will receive now all of the traditional JPublish objects in the context:

    JPublishContext.JPUBLISH_REQUEST
    JPublishContext.JPUBLISH_RESPONSE
    JPublishContext.JPUBLISH_SESSION
    JPublishCreator.APPLICATION
    JPublishContext.JPUBLISH_CHARACTER_ENCODING_MAP
    JPublishContext.JPUBLISH_URL_UTILITIES
    JPublishContext.JPUBLISH_DATE_UTILITIES
    JPublishContext.JPUBLISH_NUMBER_UTILITIES
    JPublishContext.JPUBLISH_SYSLOG
    JPublishContext.JPUBLISH_SITE

however, we are also cleaning the context so they are not accidentally sent to the remote caller.

- minor JPublishDWR revision number increased.
- added a simple example of how to invoke a JPublish server side Action from your Javascript
client code.


[2008.07.15]
-added code to allow profiling on DWR calls.
-our JPublishDWR integration is now allowing DWR to graciously falling back on jpublish's
own control for MIME types.

For example, to control the dwr/interface/... response, add the following to your jpublish.xml:
   <mime-mapping ext="js" mimetype="text/javascript"/>


[2008.05.05]
- removed the cache default configurations from the JPublish package. They may conflict with the
user ones. Copy the docs/cache/ehcache.xml and/or the docs/cache/whirlycache.xml to your WEB-INF/classes
folder in case you don't have a custom cache setup already.

[2008.03.06]
 - added the ability to use locale when parsing or formatting using DateUtilities

[2007.12.20]
- integrated profiling via the Atlassian profiling library
To enable the JPublish profiler, simply add the following line to the jpublish.xml config file:
   <profiling>true</profiling>
You can also set the minimum time reported in the trace when profiling. You probably only want to
profile methods that take more than 50ms, which is done like so:
   <profiling MIN_TIME="50">true</profiling>

[2007.10.31]
- the JPublishContext received by the Actions from the JPublishCreator contains now more useful
  objects. They are as follows:
    JPublishContext.JPUBLISH_REQUEST
    JPublishContext.JPUBLISH_RESPONSE
    JPublishContext.JPUBLISH_SESSION
    JPublishCreator.APPLICATION
    JPublishContext.JPUBLISH_CHARACTER_ENCODING_MAP
    JPublishContext.JPUBLISH_URL_UTILITIES
    JPublishContext.JPUBLISH_DATE_UTILITIES
    JPublishContext.JPUBLISH_NUMBER_UTILITIES
    JPublishCreator.DWR_CURRENT_PAGE

[2007.10.27]
- added functionality to allow DWR to invoke JPublish Actions. Check the simpleDWR
  web demo for a simple but complete example.
  http://jpublish.googlecode.com/svn/trunk/samples/simpledwr/

[2007.10.20]
- the current JPublishContext instance is now added to every HttpServletRequest.
  You can get it like this: request.getAttribute( JPublishServlet.JPUBLISH_CONTEXT);
- the SiteContext is now available in the ServletContext:
  ....getServletContext().getAttribute(SiteContext.NAME)
- added the public method getSiteContext() to the JPublishServlet.
 
[2007.10.13]
- The ORM support Wiki page was updated with details about the JPublish-Cayenne
  implementation: http://code.google.com/p/jpublish/wiki/OrmSupport

[2007.10.12]
- Cayenne support is now available to any JPublish application

[2007.08.25]
- added new rendering support through the StringTemplateViewRenderer. For
  more details visit the JPublish Wiki. We believe that ST will become the
  default template language for JPublish.
- wrapped the RepositoryWrapper in a Map, so modern template engines will
  have an easy job identifying the repository content resources as simple keys.
- small optimization
- preparing to branch the SVN

[2007.08.23]
- added a new DWR demo application. A simple and clean code showing you how one can
  monitor a file by using reverse AJAX through the DWR module.
- small optimizations and misc examples

[2007.05.28]
- WEB-INF/lib folder is not anymore required when JPublish is instantiated
  from an application different than a standard Servlet container.
- JPublish understands now how Jetty plays with the Continuations ;)
- latest PostEdenLib is now available in the lib folder
- added the latest bsh version
- DWR library is updated now and Reverse AJAX finally works with no problems.
- JP4+DWR is running successfully with the following servers: Jetty 5/6.1.3,
  Tomcat 5/6.0.13 and JBoss 4.0.2/4.0.5GA

[2007.05.20]
 - improving the JPublishComponent API in order to support
   the need for rendering a Text parameter or a View from a given path. Useful if
   you need to implement more complex Components but not as complex as a ViewRenderer.

Version 4.0 (2007.05.14)
 - Initial release
